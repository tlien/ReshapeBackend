// <auto-generated />
using System;
using BusinessManagementService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BusinessManagementService.Infrastructure.Migrations
{
    [DbContext(typeof(BusinessManagementContext))]
    [Migration("20200517223829_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaTypeId")
                        .HasColumnName("mediatypeid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScriptFileId")
                        .HasColumnName("scriptfileid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScriptParametersFileId")
                        .HasColumnName("scriptparametersfileid")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("_price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("ScriptFileId");

                    b.HasIndex("ScriptParametersFileId");

                    b.ToTable("analysisprofiles");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("mediatypes");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.ScriptFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("_script")
                        .HasColumnName("script")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("scriptfiles");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.ScriptParametersFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("_scriptParameters")
                        .HasColumnName("scriptparameters")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("scriptparametersfiles");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfilePackageAggregate.AnalysisProfileAnalysisProfilePackage", b =>
                {
                    b.Property<Guid>("AnalysisProfileId")
                        .HasColumnName("analysisprofileid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisProfilePackageId")
                        .HasColumnName("analysisprofilepackageid")
                        .HasColumnType("uuid");

                    b.HasKey("AnalysisProfileId", "AnalysisProfilePackageId");

                    b.HasIndex("AnalysisProfilePackageId");

                    b.ToTable("analysisprofileanalysisprofilepackages");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfilePackageAggregate.AnalysisProfilePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("_price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("analysisprofilepackages");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.BusinessTierAggregate.BusinessTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("_price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("businesstiers");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.FeatureAggregate.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("_price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("features");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfile", b =>
                {
                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.ScriptFile", "ScriptFile")
                        .WithMany()
                        .HasForeignKey("ScriptFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.ScriptParametersFile", "ScriptParametersFile")
                        .WithMany()
                        .HasForeignKey("ScriptParametersFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfilePackageAggregate.AnalysisProfileAnalysisProfilePackage", b =>
                {
                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfile", "AnalysisProfile")
                        .WithMany()
                        .HasForeignKey("AnalysisProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfilePackageAggregate.AnalysisProfilePackage", "AnalysisProfilePackage")
                        .WithMany("AnalysisProfileAnalysisProfilePackages")
                        .HasForeignKey("AnalysisProfilePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
