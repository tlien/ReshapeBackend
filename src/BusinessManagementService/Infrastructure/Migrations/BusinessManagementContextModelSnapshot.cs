// <auto-generated />
using System;
using BusinessManagementService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BusinessManagementService.Infrastructure.Migrations
{
    [DbContext(typeof(BusinessManagementContext))]
    partial class BusinessManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("Description")
                        .HasColumnType("text");

                    b.Property<string>("_fileName")
                        .HasColumnName("FileName")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnalysisProfiles");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfileRequiredFeature", b =>
                {
                    b.Property<Guid>("AnalysisProfileID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureID")
                        .HasColumnType("uuid");

                    b.HasKey("AnalysisProfileID", "FeatureID");

                    b.HasIndex("FeatureID");

                    b.ToTable("AnalysisProfileRequiredFeatures");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.BusinessTierAggregate.BusinessTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BusinessTiers");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.FeatureAggregate.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("Description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfileRequiredFeature", b =>
                {
                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.AnalysisProfileAggregate.AnalysisProfile", "AnalysisProfile")
                        .WithMany("RequiredFeatures")
                        .HasForeignKey("AnalysisProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessManagementService.Domain.AggregatesModel.FeatureAggregate.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
