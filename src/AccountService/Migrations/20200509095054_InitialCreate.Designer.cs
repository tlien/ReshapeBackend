// <auto-generated />
using System;
using Reshape.AccountService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Reshape.AccountService.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20200509095054_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AccountService.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessTierId")
                        .HasColumnType("uuid");

                    b.Property<bool>("_isActive")
                        .HasColumnName("isactive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTierId");

                    b.ToTable("accounts", "account");
                });

            modelBuilder.Entity("AccountService.Domain.AggregatesModel.AccountAggregate.BusinessTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("businesstiers", "account");
                });

            modelBuilder.Entity("AccountService.Domain.AggregatesModel.AccountAggregate.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("features", "account");
                });

            modelBuilder.Entity("AccountService.Infrastructure.AccountFeature", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("accountfeatures", "account");
                });

            modelBuilder.Entity("AccountService.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.HasOne("AccountService.Domain.AggregatesModel.AccountAggregate.BusinessTier", "BusinessTier")
                        .WithMany()
                        .HasForeignKey("BusinessTierId");

                    b.OwnsOne("AccountService.Domain.AggregatesModel.AccountAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("Street1")
                                .HasColumnType("text");

                            b1.Property<string>("Street2")
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("text");

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("AccountService.Domain.AggregatesModel.AccountAggregate.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ContactPersonFullName")
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.HasKey("AccountId");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });
                });

            modelBuilder.Entity("AccountService.Infrastructure.AccountFeature", b =>
                {
                    b.HasOne("AccountService.Domain.AggregatesModel.AccountAggregate.Account", "Account")
                        .WithMany("Features")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountService.Domain.AggregatesModel.AccountAggregate.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
